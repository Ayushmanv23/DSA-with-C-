class Solution {
public:
    long long getHoursToEatAll(vector<int>&piles, int bananasPerHour)
    {
        long long totalHours = 0;
        for (int i = 0; i < piles.size(); i++)
        {
            int hoursToEatPile = ceil(piles[i] / (double)bananasPerHour);
            totalHours += hoursToEatPile;
        }
        return totalHours;
    }
    int minEatingSpeed(vector<int>& piles, int h) 
    {
        int start = 1, end = *(max_element(piles.begin(), piles.end()));
        int ans = -1;
        while(start <= end)
        {
            int mid = start + (end - start) / 2;
            long long hoursToEatAll = getHoursToEatAll(piles, mid);
            if(hoursToEatAll <= h)
            {
                ans = mid; 
                end = mid - 1;
            }
            else 
            {
                start = mid + 1;
            }
        }
        return ans;
    }
};
