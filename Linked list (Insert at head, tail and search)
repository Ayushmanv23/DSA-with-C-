#include <bits/stdc++.h>
using namespace std;

struct node {
    int data;
    node* next;
    node(int val) : data(val), next(NULL) {}
};

void insertathead(node* &head, int val)
{
    node* n = new node(val); //insert at head
    n->next = head;
    head = n;
}

bool search(node* head, int key) 
{
    node* temp = head;
    while (temp != NULL) {
        if (temp->data == key) 
        {
            return true;
        }
        temp = temp->next;
    }
    return false;
}

int main() 
{
    int n, val;
    node* head = NULL;
    cout<<"Enter the number of elements: ";
    cin>>n;
    for(int i=0;i<n;++i) 
    {
        cout<<"Enter value for element "<<(i + 1)<<": ";
        cin>>val;
        node* newNode = new node(val);
        if(head == NULL) 
        {
            head = newNode;
        } 
        else 
        {
            node* temp = head;
            while(temp->next != NULL) 
            {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Print the list
    cout<<"Initial list: ";
    node* temp = head;
    while(temp != NULL) 
    {
        cout<<temp->data<<" -> ";
        temp = temp->next;
    }
    cout<<"NULL"<<endl;

    int newVal, s;
    cout<<"Enter the new value for head: ";
    cin>>newVal;
    insertathead(head, newVal);

    // Print the updated list
    cout << "Updated list: ";
    temp = head;
    while(temp != NULL) 
    {
        cout<<temp->data<<" -> ";
        temp = temp->next;
    }
    cout<<"NULL"<<endl;
    cout<<"Enter the value to search: ";
    cin >> s;
    if(search(head, s)) 
    {
        cout<<s<<" found in the list."<<endl;
    } 
    else 
    {
        cout<<s<<" not found in the list."<<endl;
    }

    // Free the allocated memory
    while (head != NULL) 
    {
        node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
